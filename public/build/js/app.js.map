{"version":3,"sources":["helpers.js","app.js","CalendarController.js","CustomEventController.js","GmailController.js","QuoteController.js","RssController.js","SizerController.js","WeatherController.js","CardBox.js","CardBoxRss.js","EventIcon.js","countdownTimer.js","CustomEventService.js","EventsService.js","FeedService.js","GeoService.js","GmailService.js","WeatherService.js"],"names":[],"mappingsjlrrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n * @param {Scope} scope\n * @param {Function} callback\n */\nangular.safeApply = function (scope, callback) {\n    scope[(scope.$$phase || scope.$root.$$phase) ? '$eval' : '$apply'](callback || function() {});\n};\n\nangular.isMobile = (function(a)\n{\n    return /((iP([oa]+d|(hone)))|Android|WebOS|BlackBerry|windows (ce|phone))/i.test(a);\n})(navigator.userAgent||navigator.vendor||window.opera);\n\nangular.isOnline = function isOnline()\n{\n    var isOnline = (window.navigator && window.navigator.onLine);\n\n    return isOnline;\n};\n\nangular.storagePrefix = function (path) {\n    var namespace = [\n        'ymag', window['gid']\n    ];\n\n    if (path && path.length) {\n        namespace.push(path);\n    }\n\n    return namespace.join('.');\n};","var app = angular.module('app', ['ngSanitize', 'LocalStorageModule', 'countdownTimer']);\n\napp.config(['localStorageServiceProvider', '$httpProvider', function (localStorageServiceProvider, $httpProvider) {\n    var namespace = angular.storagePrefix();\n    $httpProvider.defaults.headers.common.Authorization = 'Bearer ' + window['api_token'];\n    localStorageServiceProvider.setPrefix(namespace);\n    localStorageServiceProvider.setStorageCookie(1, '/');\n}]);\n\napp.run(['$rootScope', function ($rootScope) {\n    window.onclick = function (event) {\n        if (0 == $(event.target).closest('div.card-actions.dropdown.open').length\n            && 0 == $(event.target).closest('#cities-list').length) {\n            $rootScope.$broadcast('cardbox.close');\n        }\n        if (0 == $(event.target).closest('div.card-actions.dropdown.open').length) {\n            $rootScope.$broadcast('cardboxrss.close');\n        }\n    }\n}]);\n\napp.REWRITE_BASE = '/';\nif (location.host == 'dev-your-morning.rainbowriders.dk') {\n    app.REWRITE_BASE = '/public/';\n}\n\napp.API_PREFIX = app.REWRITE_BASE + 'api/v1';\n","app.controller('CalendarController', [\n    '$scope', '$rootScope', 'EventsService', 'localStorageService',\n    function ($scope, $rootScope, EventsService, localStorageService) {\n\n        $scope.calendars = [];\n        $scope.events = [];\n        $scope.hasEvents = false;\n        $scope.calendarEvents = [];\n        $scope.multiDayEvents = [];\n        var d = new Date();\n        $scope.yesterday = new Date(d.setDate(d.getDate() - 1));\n        $scope.init = function init (calendars) {\n\n            $scope.calendars = calendars;\n            setDefaultCalendar();\n\n        };\n\n        $scope.savePreferences = function savePreferences (cb) {\n\n            var temp = [];\n\n            for(var i = 0; i < $scope.calendars.length; i++) {\n                if($scope.calendars[i].selected == true) {\n                    temp.push($scope.calendars[i]);\n                }\n            }\n\n            localStorageService.set(\n                'cal',\n                JSON.stringify(angular.copy(temp)));\n\n            fetchEvents();\n\n            if(cb) {\n                cb();\n            }\n        };\n\n        $scope.cancel = function cancel (callback) {\n            resetCalendarsStatus();\n            setDefaultCalendarsStatus(getSavedCalendars());\n            if(callback) {\n                callback();\n            }\n        };\n\n        $scope.select = function (calendar) {\n            checkUncheckCalendar(calendar);\n        };\n\n        $scope.$on('cardbox.close', function () {\n            resetCalendarsStatus();\n            setDefaultCalendarsStatus(getSavedCalendars());\n        });\n\n        $scope.$watchCollection('calendarEvents', function () {\n            // $scope.events = [];\n            // for( var i = 0; i < $scope.calendarEvents.length; i++) {\n            //\n            //     for (var a in $scope.calendarEvents[i]) {\n            //         $scope.events.push($scope.calendarEvents[i][a]);\n            //     }\n            // }\n            // if($scope.events.length > 0) {\n            //     $scope.hasEvents = true;\n            // }\n            // $scope.events.sort(function (a, b) {\n            //     a = new Date(a.date);\n            //     b = new Date(b.date);\n            //     return a < b ? -1 : a > b ? 1 : 0;\n            // });\n            var tempEvents = [];\n            for(var i in $scope.calendarEvents) {\n                var exist = false;\n                for(var a in tempEvents) {\n                    if(tempEvents[a].date.toString() == $scope.calendarEvents[i].date.toString()) {\n                        exist = true;\n                        for(var k in $scope.calendarEvents[i].events) {\n                            var evtExist = false;\n                            for(var z in tempEvents[a].events) {\n                                if(tempEvents[a].events[z].id == $scope.calendarEvents[i].events[k].id) {\n                                    evtExist = true;\n                                    break;\n                                }\n                            }\n                            if(evtExist == false) {\n                                tempEvents[a].events.push($scope.calendarEvents[i].events[k]);\n                            }\n                        }\n                        break;\n                    }\n                }\n                if(exist == false) {\n                    tempEvents.push($scope.calendarEvents[i]);\n                }\n            }\n            // // console.log(tempEvents);\n            if($scope.calendarEvents.length) {\n                $scope.hasEvents = true;\n            }\n            //\n            $scope.calendarEvents = tempEvents;\n        });\n\n        function setDefaultCalendar() {\n            var saved = getSavedCalendars();\n\n            if(!saved || saved == null) {\n                $scope.calendars[0].selected = true;\n                var temp = [];\n                temp.push($scope.calendars[0]);\n                localStorageService.set(\n                    'cal',\n                    JSON.stringify(angular.copy(temp)));\n            } else {\n                setDefaultCalendarsStatus(saved);\n            }\n\n            fetchEvents();\n        }\n\n        function checkUncheckCalendar(calendar) {\n\n            for(var i =0; i < $scope.calendars.length; i++) {\n\n                if($scope.calendars[i].id == calendar.id) {\n\n                    // First time loaded\n                    if(!$scope.calendars[i].selected || $scope.calendars[i].selected == 'undefined') {\n                        $scope.calendars[i].selected = true;\n                    } else {  // if user make changed\n                        $scope.calendars[i].selected = !$scope.calendars[i].selected;\n                    }\n                }\n            }\n        }\n\n        function getSavedCalendars() {\n            return JSON.parse(localStorageService.get('cal'));\n        }\n\n        function setDefaultCalendarsStatus(calendars) {\n            for(var i =0; i < calendars.length; i++) {\n                setDefaultCalendarStatus(calendars[i]);\n            }\n        }\n\n        function setDefaultCalendarStatus(calendar) {\n            for( var i = 0; i < $scope.calendars.length; i++) {\n                if(calendar.id == $scope.calendars[i].id) {\n                    $scope.calendars[i].selected = calendar.selected || false;\n                    break;\n                }\n            }\n        }\n\n        function resetCalendarsStatus() {\n            for (var i = 0; i <$scope.calendars.length; i++) {\n                $scope.calendars[i].selected = false;\n            }\n        }\n\n        function fetchEvents () {\n            $scope.calendarEvents = [];\n            $scope.hasEvents = false;\n\n            for (var i = 0; i < $scope.calendars.length; i++) {\n                if($scope.calendars[i].selected == true) {\n                    EventsService.events($scope.calendars[i].id)\n                        .then(function (res) {\n                            $scope.me = res.me;\n                            $scope.multiDayEvents = [];\n                            for(var c in res.events) {\n                                var evt = transformDates(res.events[c]);\n                                evt = removeDeclinedEvents(evt);\n                                checkMultiDayEvent(evt);\n                                // evt.events = onlyHourlyEvents(evt);\n                                // if(evt.events.length > 0) {\n                                //     $scope.calendarEvents.push(evt);\n                                // }\n                                $scope.calendarEvents.push(evt);\n                            }\n                            addMultiDayEvents();\n                        });\n                }\n            }\n        }\n\n        function removeDeclinedEvents(evt) {\n            for(var i in evt.events){\n                if(removeEvent(evt.events[i].attendees)) {\n                    evt.events.splice(i, 1);\n                }\n            }\n            return evt;\n        }\n\n        function removeEvent(att) {\n            for(var i in att) {\n                if(att[i].email == $scope.me && att[i].responseStatus == 'declined') {\n                    return true\n                }\n            }\n            return false;\n        }\n\n        function onlyHourlyEvents(evt) {\n            var result = [];\n            for (var i in evt.events){\n                if(evt.events[i].allDay) {\n                    continue;\n                } else {\n                    result.push(evt.events[i]);\n                }\n            }\n\n            return result;\n        }\n\n        function checkMultiDayEvent(evt) {\n            for(var i in evt.events) {\n                if(evt.events[i].allDay === true) {\n                    var startDate = new Date(evt.events[i].start.date);\n                    var endDate = new Date(new Date(evt.events[i].end.date));\n                    if(startDate < endDate) {\n                        $scope.multiDayEvents.push(evt.events[i]);\n                    }\n\n                }\n            }\n        }\n\n        function transformDates(evt) {\n            evt.date = new Date(evt.date);\n            for(var i in evt.events) {\n                var startDate = new Date(evt.events[i].start.date);\n                var endDate = new Date(evt.events[i].end.date);\n                endDate.setDate(endDate.getDate() - 1);\n                evt.events[i].start.date = startDate;\n                evt.events[i].end.date = endDate;\n\n            }\n            return evt;\n        }\n\n        function addMultiDayEvents() {\n            for (var i in $scope.multiDayEvents) {\n                var endDate = $scope.multiDayEvents[i].end.date;\n                var startDate = $scope.multiDayEvents[i].start.date;\n                addNewEventDay(startDate, endDate);\n\n                pushEvent($scope.multiDayEvents[i]);\n            }\n        }\n\n\n        function addNewEventDay(startDate, endDate) {\n            var firstDay= new Date(startDate);\n            while(endDate > firstDay) {\n                var day = {\n                    date: new Date(firstDay.setDate(firstDay.getDate() + 1)),\n                    events: []\n                };\n                $scope.calendarEvents.push(day);\n            }\n        }\n\n        function pushEvent(evt) {\n            for(var i in $scope.calendarEvents) {\n                var exist = false;\n                for(var a in $scope.calendarEvents[i].events) {\n                    if($scope.calendarEvents[i].events[a].id ==  evt.id) {\n                        exist = true;\n                        break;\n                    }\n                }\n                var evtStartDate =  new Date(evt.start.date);\n                var evtEndDate = new Date(evt.end.date);\n                var calDate = new Date($scope.calendarEvents[i].date);\n\n                if(exist == false) {\n                    if(calDate >= evtStartDate && calDate <= evtEndDate) {\n                        $scope.calendarEvents[i].events.push(evt);\n                    }\n                }\n            }\n        }\n\n    }]);","app.controller('CustomEventController', ['$scope', '$rootScope', '$interval', 'localStorageService', 'CustomEventService',\nfunction ($scope, $rootScope, $interval, localStorageService, CustomEventService) {\n\n\n    $scope.options = {\n        selectedTime: 1\n    };\n    $rootScope.eventError = {};\n    $scope.event = {};\n    $scope.timeNow = new Date();\n    $scope.loading = true;\n    var weekInMilSeconds = 1000 * 60 * 60 * 24 * 7;\n    var dayInMilSeconds = 1000 * 60 * 60 * 24;\n    var hourInMilSeconds = 1000 * 60 * 60;\n    var minuteInMilSeconds = 1000 * 60;\n    var secondsInMilSeconds = 1000;\n\n\n    $scope.setSelectedValue = function (val) {\n        return $scope.options.selectedTime = parseInt(val);\n    };\n\n    $scope.createEvent = function (callback) {\n\n        $rootScope.eventError = {};\n        var date = document.getElementById(\"datepicker-autoclose\").value;\n        var title = document.getElementById(\"event-title\").value;\n        if($scope.options.selectedTime != 3) {\n            var hours = document.getElementById(\"custom-event-hours\").value;\n            var minutes = document.getElementById(\"custom-event-minutes\").value;\n            var seconds = document.getElementById(\"custom-event-seconds\").value;\n        }\n\n        if(date == '' || date == 'undefined') {\n            $rootScope.eventError.eventDate = 'Please set an event date!';\n        }\n\n        if(title == '' || title == 'undefined') {\n            $rootScope.eventError.eventTitle = 'Please set an event title!';\n        }\n\n        var dateToArr = transformDate(date);\n\n        var autoGenerated = false;\n        if(!hours && !minutes && !seconds) {\n            autoGenerated = true;\n        }\n        if($scope.options.selectedTime == 3) {\n            hours = 23;\n            minutes = 59;\n            seconds = 59;\n            autoGenerated = true;\n        }\n\n        var tempDate = new Date(dateToArr[2] + '-' + dateToArr[1] + '-' + dateToArr[0]);\n        if(hours) {\n            tempDate.setHours(parseInt(hours));\n        } else {\n            tempDate.setHours(0);\n        }\n        if(minutes) {\n            tempDate.setMinutes(parseInt(minutes));\n        } else {\n            tempDate.setMinutes(0);\n        }\n        if(seconds) {\n            tempDate.setSeconds(parseInt(seconds));\n        } else {\n            tempDate.setSeconds(0);\n        }\n        \n\n\n        if(tempDate < new Date()) {\n            $rootScope.eventError.invalidTime = 'Event time must be in the future';\n        }\n\n        if(Object.keys($rootScope.eventError).length > 0) {\n            return;\n        }\n\n        var data = {\n            date: date,\n            minutes: minutes || null,\n            hours: hours || null,\n            seconds: seconds || null,\n            title: title,\n            time_option: $scope.options.selectedTime,\n            autoGenerated: autoGenerated\n        };\n\n        if($scope.event != null) {\n\n            data.id = $scope.event.id;\n            CustomEventService.updateEvent(data)\n                .then(function (res) {\n                    fetchEvent();\n                    if(callback) {\n                        callback();\n                    }\n                });\n        } else {\n            CustomEventService.createEvent(data)\n                .then(function (res) {\n                    fetchEvent();\n                    if(callback) {\n                        callback();\n                    }\n                });\n        }\n    };\n\n    $scope.cancel = function (callback) {\n        if(callback) {\n            callback();\n        }\n        $rootScope.eventError = {};\n    };\n\n    function transformDate(arg) {\n        return arg.split('.');\n    }\n\n    function fetchEvent() {\n        $scope.loading = true;\n        CustomEventService.getEvent()\n            .then(function (res) {\n                handleEvent(res);\n                watchClockInterval();\n            })\n    }\n    function parseDateTimeForIE(str) {\n\n        var dateAndTimeArr = str.split(' ');\n        var dateToArr = dateAndTimeArr[0].split('-');\n        var timeToArr = dateAndTimeArr[1].split(':');\n\n        return new Date(dateToArr[0], dateToArr[1] - 1, dateToArr[2], timeToArr[0], timeToArr[1], timeToArr[2]);\n    }\n\n    function handleEvent(res) {\n        if(res == 'No event created yet') {\n            $scope.event = null;\n            return;\n        } else if(new Date(res.time) < new Date() ) {\n            $scope.event = null;\n            return;\n        }\n        $scope.event = res;\n        $scope.event.time = parseDateTimeForIE($scope.event.time);\n        $scope.options.selectedTime = parseInt(res.time_option);\n        $scope.loading = false;\n        $scope.eventTimeToString = eventTimeToString($scope.event.time);\n        $scope.eventDateToString = eventDateToString($scope.event.time);\n        calculateTime($scope.event.time, $scope.options.selectedTime);\n    }\n\n    var watchClockInterval = function () {\n        $interval(function () {\n            if($scope.event == null) {\n                $interval.cancel(watchClockInterval);\n                return;\n            }\n            if (new Date($scope.event.time) < new Date()) {\n                return $scope.event = null;\n            }\n            calculateTime($scope.event.time, $scope.options.selectedTime);\n        }, 1000);\n    };\n\n    function calculateTime(time, timeOption) {\n\n        var timeToEvent = time - new Date();\n        switch (timeOption) {\n            case 1:\n                var weeks = getWeeksAndRest(timeToEvent);\n                var days = getDaysAndRest(weeks.rest);\n                var hours = getHoursAndRest(days.rest);\n                var minutes = getMinutesAndRest(hours.rest);\n                var seconds = getSeconds(minutes.rest);\n                generateTimeStringOutput(weeks.weeks, days.days, hours.hours, minutes.minutes, seconds.seconds, timeOption);\n                break;\n            case 2:\n                var days = getDaysAndRest(timeToEvent);\n                var hours = getHoursAndRest(days.rest);\n                minutes = getMinutesAndRest(hours.rest);\n                var seconds = getSeconds(minutes.rest);\n                generateTimeStringOutput(null, days.days, hours.hours, minutes.minutes, seconds.seconds, timeOption);\n                break;\n            case  3:\n                var days = getDaysAndRest(timeToEvent);\n                generateTimeStringOutput(null, days.days, null, null, null, timeOption);\n                break;\n            default:\n                break;\n        }\n    }\n\n    $scope.$watch('options.selectedTime', function (newVal, oldVal ) {\n        if($scope.loading == true) {\n            return;\n        }\n        calculateTime($scope.event.time, $scope.options.selectedTime);\n    });\n\n    function getWeeksAndRest(time) {\n        return {\n            weeks: parseInt(new Date(time).getTime() / weekInMilSeconds),\n            rest: new Date(time).getTime() % weekInMilSeconds\n        }\n    }\n\n    function getDaysAndRest(time) {\n        return {\n            days: parseInt(new Date(time).getTime() / dayInMilSeconds),\n            rest: new Date(time).getTime() % dayInMilSeconds\n        }\n    }\n\n    function getHoursAndRest(time) {\n        return {\n            hours: parseInt(new Date(time).getTime() / hourInMilSeconds),\n            rest: new Date(time).getTime() % hourInMilSeconds\n        }\n    }\n\n    function getMinutesAndRest(time) {\n        return {\n            minutes: parseInt(new Date(time).getTime() / minuteInMilSeconds),\n            rest: new Date(time).getTime() % minuteInMilSeconds\n        }\n    }\n\n    function getSeconds(time) {\n        return {\n            seconds: parseInt(new Date(time).getTime() / secondsInMilSeconds)\n        }\n    }\n\n    function generateTimeStringOutput(weeks, days, hours, minutes, seconds, timeOption) {\n        switch (timeOption) {\n            case 1:\n                var weeksStr = weeks == 1 ? weeks + ' week ' : weeks + ' weeks ';\n                var daysStr = days == 1 ? days + ' day ' : days + ' days ';\n                var hoursStr = hours == 1 ? hours + ' hour ' : hours + ' hours ';\n                var minutesStr = minutes == 1 ? minutes + ' minute ' : minutes + ' minutes ';\n                var secondsStr = seconds == 1 ? seconds + ' second ' : seconds + ' seconds ';\n                $scope.timeLeftToString = 'In ' + weeksStr + daysStr + hoursStr + minutesStr + secondsStr;\n                break;\n            case 2:\n                var daysStr = days == 1 ? days + ' day ' : days + ' days ';\n                var hoursStr = hours == 1 ? hours + ' hour ' : hours + ' hours ';\n                var minutesStr = minutes == 1 ? minutes + ' minute ' : minutes + ' minutes ';\n                var secondsStr = seconds == 1 ? seconds + ' second ' : seconds + ' seconds ';\n                $scope.timeLeftToString = 'In ' + daysStr + hoursStr + minutesStr + secondsStr;\n                break;\n            case 3:\n                var daysStr = days == 1 ? days + ' day ' : days + ' days ';\n                $scope.timeLeftToString = 'In ' + daysStr;\n                break;\n            default:\n                break;\n        }\n    }\n    function eventTimeToString(time) {\n        var year = time.getFullYear();\n        var date = time.getDate() < 10 ? '0' + time.getDate() : time.getDate();\n        var month = time.getMonth() < 10 + 1? '0' + (time.getMonth() +1): time.getMonth() + 1;\n        var hour = time.getHours() < 10 ? '0' + time.getHours(): time.getHours();\n        var minutes = time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes();\n        if($scope.event.autoGenerated == true || $scope.event.autoGenerated == 1) {\n            var output = date + '.' + month + '.' + year;\n        } else if($scope.options.selectedTime == 3){\n            var output = date + '.' + month + '.' + year;\n        } else {\n            var output = date + '.' + month + '.' + year + ', ' + hour + ':' + minutes;\n        }\n\n        return output;\n    }\n\n    function eventDateToString(time) {\n        var year = time.getFullYear();\n        var date = time.getDate() < 10 ? '0' + time.getDate() : time.getDate();\n        var month = time.getMonth() < 10 + 1? '0' + (time.getMonth() +1): time.getMonth() + 1;\n        var output = date + '.' + month + '.' + year;\n\n        return output;\n    }\n    fetchEvent();\n}]);","app.controller('GmailController', ['$scope', 'GmailService', '$sce', 'localStorageService',\n    function ($scope, GmailService, $sce, localStorageService) {\n        $scope.searchMode = true;\n\n        $scope.message = null;\n\n        $scope.messagesLowThanTen = false;\n\n        $scope.loading = false;\n\n        $scope.nextPageToken = null;\n\n        $scope.messages = null;\n\n        var emptyFilter = function () {\n            return {\n                'from': '',\n                'to': '',\n                'subject': '',\n                'includeSpamTrash': false\n            };\n        };\n\n        var savedFilter;\n        if (!(savedFilter = localStorageService.get('g_fltr'))) {\n            savedFilter = JSON.stringify(emptyFilter());\n            localStorageService.set('g_fltr', savedFilter);\n        }\n\n        $scope.filter = JSON.parse(savedFilter);\n\n        $scope.query = buildQuery();\n\n        function buildQuery() {\n            $scope.query = '';\n\n            var q = [];\n            angular.forEach(['from', 'to', 'subject'], function (field, index, values) {\n                var value = $scope.filter[field];\n\n                if (value.length) {\n                    q.push(field + ': (' + value + ')');\n                }\n            });\n\n            $scope.query = q.join(\" \").trim();\n\n            return $scope.query;\n        }\n\n        $scope.savePreferences = function (cb) {\n            $scope.messages = null;\n            $scope.showBackground = false;\n            $scope.nextPageToken = null;\n\n            return $scope.fetchMessages(cb);\n        };\n\n        $scope.next = $scope.fetchMessages = function (cb) {\n            if ($scope.loading) return false;\n\n            $scope.loading = true;\n\n            // save filter\n            localStorageService.set('g_fltr', savedFilter = JSON.stringify($scope.filter));\n\n            var args = {\n                'includeSpamTrash': !!$scope.filter.includeSpamTrash,\n                'q': buildQuery(),\n                'nextPageToken': $scope.nextPageToken\n            };\n\n            return GmailService.fetchMessages(args)\n                .then(function (messages) {\n                    if (cb) {\n                        cb();\n                    }\n                    $scope.loading = false;\n                    if($scope.messages == null) {\n                        $scope.messages = [];\n                    }\n                    // stop to push duplicated messages\n                    // if(messages.messages.length < 10) {\n                    //     $scope.messagesLowThanTen = true;\n                    // }\n                    // image background helper\n                    // if(messages.messages.length == 0) {\n                    //     $scope.loading = false;\n                    //     $scope.showBackground = $scope.isEmailsEmpty();\n                    // }\n                    // restore listing view\n                    angular.safeApply($scope, function ($scope) {\n                        for (var i in messages.messages) {\n                            // if(isFromInbox(messages.messages[i])) {\n                                $scope.messages.push(messages.messages[i]);\n                            // }\n                        }\n                        $scope.nextPageToken = messages.nextPage;\n                    });\n                })\n                .catch(function () {\n                    $scope.loading = false;\n                });\n        };\n\n        // fetch messages on page ready\n        $scope.fetchMessages();\n\n        $scope.isUnRead = function (message) {\n            return message.hasOwnProperty('labels')\n                && (-1 < message.labels.indexOf('UNREAD'));\n        };\n\n        $scope.fullMessageUrl = function (messageId) {\n            return $sce.trustAsResourceUrl(app.API_PREFIX + '/gmail/messages/' + messageId + '/body');\n        };\n\n        $scope.toggleSearchMode = function (flag, callback) {\n            if (!flag) {\n                $scope.filter = JSON.parse(savedFilter);\n            }\n\n            // $scope.searchMode = !!flag;\n\n            if (callback) {\n                callback();\n            }\n        };\n\n        $scope.backToList = function () {\n            $scope.message = null;\n        };\n\n        $scope.readMessage = function (messageId) {\n            $scope.loading = true;\n            GmailService.get(messageId)\n                .then(function (message) {\n                    angular.safeApply($scope, function ($scope) {\n                        $scope.message = message;\n\n                        $scope.loading = false;\n\n                        var currentMessage = $scope.messages.filter(function (message) {\n                            return message.id == messageId;\n                        })[0];\n\n                        $scope.messages.map(function (message) {\n                            if (message.id == messageId && $scope.isUnRead(message)) {\n                                var index = message.labels.indexOf('UNREAD');\n\n                                message.labels.splice(index, 1);\n\n                                GmailService.markAsRead(messageId);\n                            }\n\n                            return message;\n                        });\n                    });\n                })\n                .catch(function () {\n                    $scope.loading = false;\n                });\n        };\n\n        function isFromInbox (msg) {\n            for (var i in msg.labels) {\n                if(msg.labels[i] == 'INBOX') {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        $scope.$watchCollection('messages', function () {\n            $scope.showBackground = $scope.isEmailsEmpty();\n        });\n\n        $scope.isEmailsEmpty = function isEmailsEmpty() {\n\n            if(($scope.messages != null && !$scope.messages.length && $scope.message == null)) {\n                return true;\n            }\n\n            return false;\n        }\n\n    }]);","app.controller('QuoteController', ['$scope', '$http', function ($scope, $http) {\n    $scope.quote = {\n        id: null,\n        quote: '',\n        author: ''\n    };\n\n    $scope.loading = false;\n\n    /**\n     * Fetch random quote\n     */\n    $scope.fetchRandom = function () {\n        if ($scope.loading) return false;\n\n        $scope.loading = true;\n        $http.get(app.API_PREFIX + '/quotes/random').then(function (response) {\n            $scope.quote = response.data;\n            $scope.loading = false;\n        });\n    }\n}]);","app.controller('RssController', [\n    '$scope', '$timeout', '$rootScope', 'localStorageService', 'FeedService', '$q',\n    function ($scope, $timeout, $rootScope, localStorageService, FeedService, $q) {\n        $scope.loading = false;\n        $scope.junkFeed = null;\n        $rootScope.closeRssSettings = true;\n\n        function key(path) {\n            return window['lang'] + '.' + path;\n        }\n\n        function fullList() {\n            return mapToInt(_.pluck($scope.allFeeds, 'id'));\n        }\n\n        function mapToInt(values) {\n            return values.map(function (value) {\n                return parseInt(value);\n            });\n        }\n\n        function restoreReadableFeeds() {\n            var savedFeeds;\n            var hasSavedFeeds = localStorageService.keys().indexOf(key('feeds')) > -1;\n\n            $feeds = fullList();\n\n            // if (!hasSavedFeeds) {\n            //     $feeds = fullList();\n            // } else {\n            //     savedFeeds = localStorageService.get(key('feeds'));\n            //     if (savedFeeds.length) {\n            //         $feeds = mapToInt(savedFeeds.split(','));\n            //     }\n            // }\n\n            $scope.savedFeeds = angular.copy($feeds);\n\n            allChecked();\n        }\n\n        function parseDateTimeForIE(str) {\n\n            var dateAndTimeArr = str.split(' ');\n            var dateToArr = dateAndTimeArr[0].split('-');\n            var timeToArr = dateAndTimeArr[1].split(':');\n\n            return new Date(dateToArr[0], dateToArr[1] - 1, dateToArr[2], timeToArr[0], timeToArr[1], timeToArr[2]);\n        }\n        \n        function fetchNews() {\n            var defer = $q.defer();\n\n            if ($scope.loading || !$feeds.length) {\n                defer.resolve([]);\n            } else {\n                $scope.loading = true;\n                FeedService.news($feeds).then(function (news) {\n                    $scope.loading = false;\n                    $scope.articles = news;\n                    for (var i in $scope.articles){\n                        $scope.articles[i].pubDate.date = parseDateTimeForIE($scope.articles[i].pubDate.date);\n                    }\n                    defer.resolve(news);\n                });\n            }\n            return defer.promise;\n        }\n\n        $scope.allChecked = false;\n\n        // all feeds\n        $scope.allFeeds = [];\n\n        // readable feeds\n        var $feeds = [];\n\n        $scope.savedFeeds = [];\n\n        $scope.articles = [];\n\n\n        function allChecked() {\n            $scope.allChecked = ($feeds.length == $scope.allFeeds.length);\n        }\n\n        // $scope.$watch('feeds', function (v1, v2) {\n        //     if (v1 === v2) return false;\n        //\n        //     allChecked();\n        // }, true);\n\n        $scope.toggleAll = function ($event) {\n            if ($event.target.checked == true) {\n                $feeds = fullList();\n            } else {\n                $feeds = [];\n            }\n        };\n\n        $scope.init = function (allFeeds) {\n            $scope.allFeeds = allFeeds;\n            restoreReadableFeeds();\n\n            fetchNews();\n        };\n\n        $scope.savePreferences = function (cb) {\n            $scope.savedFeeds = mapToInt($feeds);\n\n            localStorageService.set(key('feeds'), $scope.savedFeeds.join(','));\n\n            return fetchNews().then(function () {\n                if (cb) {\n                    cb();\n                }\n            });\n        };\n\n        $scope.cancel = function (cb) {\n            restoreReadableFeeds();\n\n            if (cb) {\n                cb();\n            }\n        };\n\n        $scope.trackUntrack = function (feed_id) {\n            feed_id = parseInt(feed_id);\n\n            if ($scope.trackable(feed_id)) {\n                $feeds = _.without($feeds, feed_id);\n            } else {\n                $feeds.push(feed_id);\n            }\n        };\n\n        $scope.trackable = function (feed_id) {\n            feed_id = parseInt(feed_id);\n\n            return _.indexOf($feeds, feed_id) != -1;\n        };\n\n        $scope.customFeedUrl = '';\n        $rootScope.rssValidLink = true;\n\n        $scope.addCustomRSSFeed = function (url, name) {\n            $rootScope.rssValidLink = true;\n            $rootScope.rssValidName = true;\n            var data = {\n                url: url,\n                name: name\n            };\n            if(!url || url == 'undefined') {\n                $rootScope.rssValidLink = false;\n            }\n            if(!name || name == 'undefined') {\n                $rootScope.rssValidName = false;\n            }\n            if($rootScope.rssValidLink == false || $rootScope.rssValidName == false) {\n                return;\n            }\n            FeedService.createCustomFeed(data)\n                .then(function (res) {\n                    document.getElementById('rss_url').value = '';\n                    document.getElementById('rss_name').value = '';\n                    $scope.allFeeds.push({id: res.id, name: res.name});\n                    restoreReadableFeeds();\n                    fetchNews();\n                }, function (err) {\n                    $rootScope.rssValidLink = false;\n                })\n        };\n\n        $scope.confirmDeleteFeed = function confirmDeleteFeed(feed) {\n            $rootScope.closeRssSettings = false;\n            return $scope.junkFeed = feed;\n        };\n\n        $scope.cancelDeleteFeed = function cancelDeleteFeed() {\n            $rootScope.closeRssSettings = false;\n            return $scope.junkFeed = null;\n        };\n\n        $scope.deleteFeed = function deleteFeed() {\n            $rootScope.closeRssSettings = false;\n            if($scope.junkFeed == null) {\n                return;\n            }\n            FeedService.deleteFeed($scope.junkFeed.id)\n                .then(function (res) {\n                    $scope.allFeeds = res;\n                    restoreReadableFeeds();\n                    fetchNews();\n                });\n        }\n\n    }]);","app.controller('SizerController', ['$scope', '$window', function ($scope, $window) {\n    function getMultiplier() {\n        if ($.browser.msie) {\n            return 0.695;\n        }\n        return 0.815;\n    }\n\n    var resize = function() {\n        var k = getMultiplier();\n\n        var viewport = $(window).height();\n        var height = Math.round(viewport * k);\n        if (! angular.isMobile) {\n            if(viewport > 800) {\n                $scope.size1 = Math.round(height * 0.35);\n                $scope.size2 = Math.round(height * 0.45);\n                $scope.size3 = height - ($scope.size1 + $scope.size2);\n            } else if (viewport > 660) {\n                $scope.size1 = Math.round(height * 0.35);\n                $scope.size2 = Math.round(height * 0.42);\n                $scope.size3 = height - ($scope.size1 + $scope.size2 + 30);\n            } else {\n                $scope.size1 = Math.round(height * 0.33);\n                $scope.size2 = Math.round(height * 0.38);\n                $scope.size3 = height - ($scope.size1 + $scope.size2 + 55);\n            }\n\n        } else {\n            $scope.size1 = 190;\n            $scope.size2 = 230;\n            $scope.size3 = 140;\n        }\n\n\n        $scope.resized = true;\n    };\n    setTimeout(resize, 100);\n\n    $(window).on('resize', resize);\n}]);","app.controller('WeatherController', [\n    '$scope', '$timeout', 'WeatherService', 'GeoService', 'localStorageService', '$http',\n    function ($scope, $timeout, WeatherService, GeoService, localStorageService, $http) {\n        var filterChanged = false, savedFilter;\n\n        var defaultFilter = {\n            units: 'si',\n            location: {},\n            address: \"\"\n        };\n\n        $scope.cities = [];\n\n        $scope.filter = angular.copy(defaultFilter);\n\n        $scope.weather = {};\n\n        $scope.loading = false;\n\n        function searchForCity(name) {\n            $http.get(app.API_PREFIX + '/geo/places?name=' + name)\n                .then(function (response) {\n                    var cities = _.uniq(response.data.predictions) || [];\n\n                    $scope.cities = cities;\n                });\n        }\n\n        // skipTracking used when city is predicted by Places API and directly inserted into filter.location\n        // so to prevent double checking, temporary skip this step\n        var skipTracking = false;\n\n        function addressModified(n1, n2) {\n            return n1.address !== n2.address && n1.address.length >= 3;\n        }\n\n        $scope.$watch('filter', function (n1, n2) {\n            if (skipTracking || n1 === n2) return false;\n            filterChanged = true;\n\n            if (addressModified(n1, n2)) {\n                searchForCity(n1.address);\n            }\n\n            // restore tracking:\n            skipTracking = false;\n        }, true);\n\n        function restoreSavedFilter() {\n            delayFilterTracking();\n\n            $scope.filter = angular.copy(defaultFilter);\n        }\n\n        function finish(cb) {\n            if (cb) {\n                cb();\n            }\n        }\n\n        function cacheFilter() {\n            localStorageService.set('w_fltr', JSON.stringify(_.omit($scope.filter, 'address')));\n\n            defaultFilter = angular.copy($scope.filter);\n        }\n\n        function loadCachedFilter() {\n            return JSON.parse(localStorageService.get('w_fltr'));\n        }\n\n        function currentLocation() {\n            return [\n                $scope.filter.location.lat,\n                $scope.filter.location.lng\n            ].join(\",\")\n        }\n\n        // when location or units did change => fetch new weather and set to cache\n        $scope.$on('location.changed', function () {\n            WeatherService.fetch(currentLocation(), {units: $scope.filter.units}).then(function (results) {\n                $scope.weather = angular.extend(results, $scope.filter);\n\n                var currnetHour = new Date().getHours();\n                var currentDate = new Date().getDate();\n                var counter = 1;\n                for (var i in $scope.weather.hourly.data) {\n\n                    var time = new Date($scope.weather.hourly.data[i].time);\n                    var hour = time.getHours();\n                    var date = time.getDate();\n                    if(currentDate == date && currnetHour == hour) {\n                        $scope.currentHourSummary = $scope.weather.hourly.data[i].summary;\n                        $scope.currentHourIcon = $scope.icon($scope.weather.hourly.data[i].icon);\n                        $scope.currnetHourTemperature = $scope.weather.hourly.data[i].temperature;\n                        $scope.startIndex = counter + 24;\n                    }\n                    counter++;\n                }\n                $scope.city = $scope.weather.address.split(',')[0];\n            });\n        });\n\n        if (!(savedFilter = loadCachedFilter())) {\n            GeoService.geolocate().then(function (GeoService) {\n                $scope.filter.location = {\n                    lat: GeoService.getLatitude(),\n                    lng: GeoService.getLongitude()\n                };\n\n                lookup();\n            });\n        } else {\n            $scope.filter = angular.copy(savedFilter);\n            defaultFilter = angular.copy($scope.filter);\n\n            lookup(savedFilter.location.lat, savedFilter.location.lng);\n        }\n\n        function lookup(lat, lng) {\n            GeoService.lookup(lat || GeoService.getLatitude(), lng || GeoService.getLongitude()).then(function (result) {\n                delayFilterTracking();\n                $scope.filter.address = result.formatted_address;\n\n                cacheFilter();\n\n                $scope.$emit('location.changed');\n            });\n        }\n\n        $scope.cancel = function (callback) {\n            restoreSavedFilter();\n\n            finish(callback);\n        };\n\n        /**\n         * Save module preferences\n         * @returns {boolean}\n         */\n        $scope.savePreferences = function (callback) {\n            if (!filterChanged)\n                return false;\n\n            if ($scope.loading)\n                return false;\n\n            $scope.loading = true;\n\n            if (filterChanged && $scope.filter.address.length) {\n                filterChanged = false;\n                GeoService.geocode($scope.filter.address).then(function (result) {\n                    if (result && result.hasOwnProperty('geometry')) {\n                        delayFilterTracking();\n\n                        $scope.filter = angular.extend($scope.filter, {\n                            // address: result.formatted_address,\n                            location: result.geometry.location\n                        });\n\n                        cacheFilter();\n\n                        $scope.$emit('location.changed');\n\n                        finish(callback);\n                    }\n\n                    $scope.loading = false;\n                });\n            } else {\n                $scope.$emit('location.changed');\n\n                finish(callback);\n            }\n\n            return false;\n        };\n\n        $scope.locationToCity = function (address) {\n            if (!address || !address.indexOf(',')) return '';\n\n            return _.first(\n                address.split(', ')\n            );\n        };\n\n        function delayFilterTracking() {\n            skipTracking = true;\n\n            $timeout(function () {\n                skipTracking = false;\n            }, 100);\n        }\n\n        $scope.selectCity = function (city) {\n            delayFilterTracking();\n\n            $scope.filter.address = city.description;\n\n            $scope.cities = null;\n        };\n\n        $scope.icon = function (icon) {\n            return app.REWRITE_BASE + 'images/icons/w/' + icon + '.png';\n        }\n\n        $scope.showThisHour = function (currentHourData) {\n            var currnetHour = new Date().getHours();\n            var currentDate = new Date().getDate();\n            var time = new Date(currentHourData.time);\n            var hour = time.getHours();\n            var date = time.getDate();\n            if(currentDate == date && currnetHour < hour) {\n                return true;\n            } else if(currentDate < date) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        $scope.getTimeToDate = function (time) {\n            return new Date(time);\n        }\n    }]);","app.directive('cardBox', ['$timeout', '$rootScope', function ($timeout, $rootScope) {\n    return {\n        'restrict': \"E\",\n        'scope': {\n            'title': \"@\"\n        },\n        'transclude': {\n            'actions': '?cardBoxActions',\n            'body': 'cardBoxBody'\n        },\n        'link': function (scope, element) {\n            scope.editable = false;\n\n            /**\n             * toggle the actions button if no actions content provided\n             * @type {boolean}\n             */\n            $timeout(function () {\n                scope.hasActions = !!element.find('card-box-actions').text().length;\n            });\n\n            /**\n             * Toggle box's preferences\n             */\n            scope.switchEditableMode = function (callback) {\n\n                scope.editable = !scope.editable;\n\n\n                if (callback) {\n                    callback();\n                }\n            };\n\n            function close() {\n\n                if(Object.keys($rootScope.eventError).length > 0) {\n                    if($rootScope.eventError.invalidTime) {\n                        document.getElementById(\"custom-event-hours\").value = '';\n                        document.getElementById(\"custom-event-minutes\").value = '';\n                        document.getElementById(\"custom-event-seconds\").value = '';\n                    }\n                    $rootScope.eventError = {};\n                }\n\n                $rootScope.rssValidLink = true;\n                var datePickerOpen = document.getElementsByClassName(\"datepicker\");\n                if(datePickerOpen.length > 0) {\n                    return;\n                }\n                angular.safeApply(scope, function (scope) {\n                    scope.editable = false;\n                });\n            }\n\n            scope.close = close;\n\n            $rootScope.$on('cardbox.close', close);\n        },\n        'templateUrl': app.REWRITE_BASE + 'assets/templates/card-box.html'\n    };\n}]);","app.directive('cardBoxRss', ['$timeout', '$rootScope', function ($timeout, $rootScope) {\n    return {\n        'restrict': \"E\",\n        'scope': {\n            'title': \"@\"\n        },\n        'transclude': {\n            'actions': '?cardBoxRssActions',\n            'body': 'cardBoxRssBody'\n        },\n        'link': function (scope, element) {\n            scope.editable = false;\n\n            /**\n             * toggle the actions button if no actions content provided\n             * @type {boolean}\n             */\n            $timeout(function () {\n                scope.hasActions = !!element.find('card-box-rss-actions').text().length;\n            });\n\n            /**\n             * Toggle box's preferences\n             */\n            scope.switchEditableMode = function (callback) {\n\n                scope.editable = !scope.editable;\n\n\n                if (callback) {\n                    callback();\n                }\n            };\n\n            function close() {\n                if($rootScope.closeRssSettings == false) {\n                    $rootScope.closeRssSettings = true;\n                    return;\n                }\n                $rootScope.rssValidLink = true;\n                angular.safeApply(scope, function (scope) {\n                    scope.editable = false;\n                });\n            }\n\n            scope.close = close;\n\n            $rootScope.$on('cardboxrss.close', close);\n        },\n        'templateUrl': app.REWRITE_BASE + 'assets/templates/card-box-rss.html'\n    };\n}]);","app.directive('eventIcon', [function () {\n    return {\n        restrict: \"E\",\n        scope: null,\n        link: function (scope, element, attribs) {\n            var event = JSON.parse(attribs.event);\n            var icon = null;\n\n            if (event.birthday) {\n                icon = 'ti-gift';\n            } else if (! event.allDay) {\n                icon = 'ti-alarm-clock';\n            }\n\n            scope.icon = icon;\n        },\n        template: '<i ng-if=\"icon\" class=\"{{ icon }}\">&nbsp;</i>'\n    };\n}]);","/*global angular */\n(function (angular) {\n    'use strict';\n    angular.module('countdownTimer', [])\n        .directive('countdown', function ($interval, dateFilter) {\n            return {\n                restrict: 'A',\n                transclude: true,\n                link: function (scope, element, attrs) {\n                    var countDownInterval;\n\n                    function displayString() {\n                        \n                        attrs.units = angular.isArray(attrs.units) ?  attrs.units : attrs.units.split('|');\n                        var lastUnit = attrs.units[attrs.units.length - 1],\n                            unitConstantForMillisecs = {\n                                weeks: (1000 * 60 * 60 * 24 * 7),\n                                days: (1000 * 60 * 60 * 24),\n                                hours: (1000 * 60 * 60),\n                                minutes: (1000 * 60),\n                                seconds: 1000,\n                                milliseconds: 1\n                            },\n                            unitsLeft = {},\n                            returnString = '',\n                            totalMillisecsLeft = new Date(attrs.endDate) - new Date(),\n                            i,\n                            unit;\n                        for (i in attrs.units) {\n                            if (attrs.units.hasOwnProperty(i)) {\n                                //validation\n                                unit = attrs.units[i].trim();\n                                if (unitConstantForMillisecs[unit.toLowerCase()] === false) {\n                                    $interval.cancel(countDownInterval);\n                                    throw new Error('Cannot repeat unit: ' + unit);\n\n                                }\n                                if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {\n                                    $interval.cancel(countDownInterval);\n                                    throw new Error('Unit: ' + unit + ' is not supported. Please use following units: weeks, days, hours, minutes, seconds, milliseconds');\n                                }\n\n                                //saving unit left into object\n                                unitsLeft[unit] = totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];\n\n                                //precise rounding\n                                if (lastUnit === unit) {\n                                    unitsLeft[unit] = Math.ceil(unitsLeft[unit]);\n                                } else {\n                                    unitsLeft[unit] = Math.floor(unitsLeft[unit]);\n                                }\n                                //updating total time left\n                                totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];\n                                //setting this value to false for validation of repeated units\n                                unitConstantForMillisecs[unit.toLowerCase()] = false;\n                                //adding verbage\n\n                                returnString += ' ' + unitsLeft[unit] + ' ' + unit;\n                                \n                            }\n                        }\n                        return returnString;\n                    }\n                    function updateCountDown() {\n                        element.text(displayString());\n                    }\n\n                    element.on('$destroy', function () {\n                        $interval.cancel(countDownInterval);\n                    });\n\n                    countDownInterval = $interval(function () {\n                        updateCountDown();\n                    }, 1);\n                }\n            };\n        });\n}(angular));","app.factory('CustomEventService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.createEvent = function (data) {\n\n        return $http.post(app.API_PREFIX + '/custom-event', data)\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    factory.getEvent = function () {\n        return $http.get(app.API_PREFIX + '/custom-event')\n            .then(function (response) {\n                return response.data.data;\n            })\n    };\n\n    factory.updateEvent = function (data) {\n        return $http.post(app.API_PREFIX + '/custom-event/' + data.id, data)\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    return factory;\n}]);","app.factory('EventsService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.events = function (calendar) {\n        var args = $httpParamSerializer({\n            'c': calendar,\n            't': (new Date).getTime(),\n            'tz' : 0//(new Date).getTimezoneOffset()\n        });\n        return $http.get(app.API_PREFIX + '/calendar/events?' + args)\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    return factory;\n}]);","app.factory('FeedService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.news = function (feeds) {\n        var args = $httpParamSerializer({\n            ids: feeds.join(',')\n        });\n        return $http.get(app.API_PREFIX + '/feed/news?' + args)\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    factory.createCustomFeed = function (data) {\n        return $http.post(app.API_PREFIX + '/feed', data)\n            .then(function (res) {\n               return res.data.data;\n            });\n    };\n\n    factory.deleteFeed = function (id) {\n        return $http.delete(app.API_PREFIX + '/feed/' + id)\n            .then(function (res) {\n                return res.data.feeds;\n            });\n    };\n\n    return factory;\n}]);","app.factory('GeoService', ['$q', '$http', function ($q, $http) {\n    var factory = {\n        lat: null,\n        lng: null\n    };\n\n    factory.setLocation = function (lat, lng) {\n        factory.lat = parseFloat(lat);\n        factory.lng = parseFloat(lng);\n\n        return factory;\n    };\n\n    factory.getLatitude = function () {\n        return this.lat;\n    };\n\n    factory.getLongitude = function () {\n        return this.lng;\n    };\n\n    function setDefaultLocation() {\n        factory.setLocation(\n            40.7127837,\n            -74.0059413\n        );\n\n        return factory;\n    }\n\n    function fetchLocationUsingIP(defer) {\n        $http.get(app.API_PREFIX + '/geo/ip').then(function (response) {\n            var data = response.data;\n            if (data.cityName.length && '-' != data.cityName) {\n                factory.setLocation(\n                    data.latitude,\n                    data.longitude\n                );\n                defer.resolve(factory);\n            } else {\n                defer.resolve(\n                    setDefaultLocation()\n                );\n            }\n        }).catch(function () {\n            defer.resolve(\n                setDefaultLocation()\n            );\n        });\n    }\n\n    /**\n     * Locate the client by asking Navigator.GeoLocation.\n     */\n    factory.geolocate = function () {\n        var defer = $q.defer();\n\n        // setTimeout(function () {\n        //     return fetchLocationUsingIP(defer);\n        // }, 5000);\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                factory.setLocation(\n                    position.coords.latitude,\n                    position.coords.longitude\n                );\n\n                defer.resolve(factory);\n            }, function () {\n                return fetchLocationUsingIP(defer);\n            });\n        } else {\n            // set default location to new york\n            defer.resolve(\n                setDefaultLocation()\n            );\n        }\n\n        return defer.promise;\n    };\n\n    factory.geocode = function (location) {\n        return $http.get(app.API_PREFIX + '/geo/code?loc=' + location)\n            .then(function (response) {\n                return response.data.results[0];\n            });\n    };\n\n    factory.lookup = function (lat, lng) {\n        return $http.get(app.API_PREFIX + '/geo/lookup?latlng=' + [lat, lng].join(','))\n            .then(function (response) {\n                return response.data.results[0];\n            });\n    };\n\n    return factory;\n}]);","app.factory('GmailService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    /**\n     * Fetch the messages list that match criteria.\n     *\n     * @param args\n     * @returns {*}\n     */\n    factory.fetchMessages = function (args) {\n        return $http.get(app.API_PREFIX + '/gmail/messages?' + $httpParamSerializer(args))\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    /**\n     * Fetch the message.\n     *\n     * @param messageId\n     * @returns {*}\n     */\n    factory.get = function (messageId) {\n        return $http.get(app.API_PREFIX + '/gmail/messages/' + messageId + '?include=body')\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    /**\n     * Mark message as Read.\n     *\n     * @param messageId\n     * @returns {*}\n     */\n    factory.markAsRead = function (messageId) {\n        return $http.get(app.API_PREFIX + '/gmail/messages/' + messageId + '/touch');\n    };\n\n    return factory;\n}]);","app.factory(\"WeatherService\", ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.fetch = function (coords, params) {\n        var $args = angular.extend({\n            coords: coords,\n            units: 'si'\n        }, params || {});\n\n        var $url = app.API_PREFIX + '/weather/get?' + $httpParamSerializer($args);\n        return $http\n            .get($url)\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    return factory;\n}]);"],"sourceRoot":"/source/"}